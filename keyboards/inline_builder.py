from typing import List
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from states.order_states import OrderStatus

# —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
def inline_builder(buttons: List[dict], row_quantity: int = 1) -> InlineKeyboardMarkup:
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
    inline_keyboard = []
    
    if row_quantity == 1:
        for button in buttons:
            inline_btn = InlineKeyboardButton(text=button["text"], callback_data=button["callback_data"])
            inline_keyboard.append([inline_btn])
    else:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ row_quantity –≤ —Ä—è–¥
        row = []
        for button in buttons:
            row.append(InlineKeyboardButton(text=button["text"], callback_data=button["callback_data"]))
            if len(row) == row_quantity:
                inline_keyboard.append(row)
                row = []
        if row:
            inline_keyboard.append(row)

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
def get_paginated_keyboard(buttons: list[InlineKeyboardButton], page: int, back_callback_data: str, cb_prefix: str, items_per_page: int = 7) -> InlineKeyboardMarkup:
    keyboard_builder = InlineKeyboardBuilder()
    start_index = (page - 1) * items_per_page
    end_index = start_index + items_per_page

    for button in buttons[start_index:end_index]:
        keyboard_builder.row(button)

    navigation_buttons = []
    # –ö–Ω–æ–ø–∫–∞ "prev page", –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(text=f" {page-1} ‚óÄÔ∏è", callback_data=f"page:{cb_prefix}:{page-1}"))
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    navigation_buttons.append(InlineKeyboardButton(text="üè° –ù–∞–∑–∞–¥", callback_data=back_callback_data))
    # –ö–Ω–æ–ø–∫–∞ "next page", –µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if end_index < len(buttons):
        navigation_buttons.append(InlineKeyboardButton(text=f"‚ñ∂Ô∏è {page+1} ", callback_data=f"page:{cb_prefix}:{page+1}"))

    keyboard_builder.row(*navigation_buttons)
    return keyboard_builder.as_markup()


# –∫–Ω–æ–ø–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
def get_inline_orders(orders, ind:int = 1) -> List[InlineKeyboardButton]:
    
    buttons = []
    if ind == 1:
        for order in orders: # –∫–Ω–æ–ø–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
            text = f"–ó–∞–∫–∞–∑ ‚Ññ{order.id} - {'–í—ã–ø–æ–ª–Ω–µ–Ω' if order.status == OrderStatus.COMPLETED else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω'}"
            callback_data = f"order_info_{order.id}"
            buttons.append(InlineKeyboardButton(text=text, callback_data=callback_data)) 
            
    elif ind == 2:
        for order in orders: # –∫–Ω–æ–ø–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
            text = f"üìÑ –ó–∞–∫–∞–∑ ‚Ññ{order.id} - {'–í—ã–ø–æ–ª–Ω–µ–Ω' if order.status == OrderStatus.COMPLETED else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω'}"
            callback_data = f"courier_order_info_{order.id}"
            buttons.append(InlineKeyboardButton(text=text, callback_data=callback_data)) 

    return buttons

