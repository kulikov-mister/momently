from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from config_data.config import geolocator
from database.add_to_db import add_location_to_db
from Filter.Filter import IsNotCommand
from keyboards.inline.adresses import create_address_keyboard
from keyboards.reply.orders_reply.send_location import send_location_keyboard
from keyboards.reply.reply_menu_user import get_main_menu_keyboard
from loader import dp
from states.admin_states import CompanyState
from utils.get_adresses import get_sorted_address

router = Router()
dp.include_router(router)

# –∑–∞–ø—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–π
@router.callback_query(F.data == 'add_location')
async def location_request(call: CallbackQuery, state: FSMContext):
    await state.update_data(admin_id=call.from_user.id)
    await call.message.answer("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:</b> \n\n"
                              "(–ì–æ—Ä–æ–¥, –æ–±–ª–∞—Å—Ç—å, —Ä–∞–π–æ–Ω –∏—Ç–¥)\n"
                              "–ö—É—Ä—å–µ—Ä—ã, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫ –Ω–µ–π, –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã, –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
    await state.set_state(CompanyState.LOCATION_NAME)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
@router.message(F.text, IsNotCommand(), CompanyState.LOCATION_NAME)
async def handle_location_name(message: Message, state: FSMContext):
    state_data = await state.get_data()
    state_data["name_location"] = message.text

    await state.set_data(state_data)
    await message.answer(
        "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è '{}' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.".format(message.text),
        reply_markup=send_location_keyboard())
    await state.set_state(CompanyState.LOCATION)

# –ø—Ä–∏–µ–º –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
@router.message(CompanyState.LOCATION, F.content_type.in_(['location', 'venue']))
async def handle_location(message: Message, state: FSMContext):
    if message.location:
        latitude = message.location.latitude
        longitude = message.location.longitude

        state_data = await state.get_data()
        state_data["latitude"] = latitude
        state_data["longitude"] = longitude

        await state.set_data(state_data)
        add_location_to_db(state_data)
        await message.answer("‚úÖ –õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    elif message.venue:
        latitude = message.venue.location.latitude
        longitude = message.venue.location.longitude

        state_data = await state.get_data()
        state_data["latitude"] = latitude
        state_data["longitude"] = longitude

        await state.set_data(state_data)
        add_location_to_db(state_data)
        await message.answer("‚úÖ –õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        await handle_location_text(message, state)

# –ª–æ–∫–∞—Ü–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
@router.message(IsNotCommand(), CompanyState.LOCATION)
async def handle_location_text(message: Message, state: FSMContext):
    location = await geolocator.geocode(message.text, exactly_one=False)
    if not location:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    locations_data = [
        (get_sorted_address(loc.address), loc.latitude, loc.longitude) for loc in location
    ]
    await state.set_data({'locations_data': locations_data})
    inline_kb = create_address_keyboard(locations_data, 1, "mainstart_company", "LOCATION")
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=inline_kb)

# –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data.startswith("location:"), CompanyState.LOCATION)
async def handle_location_callback_admin(call: CallbackQuery, state: FSMContext):
    _, lat, lon = call.data.split(":")
    latitude = float(lat)
    longitude = float(lon)

    state_data = await state.get_data()
    state_data["latitude"] = latitude
    state_data["longitude"] = longitude

    add_location_to_db(state_data)
    await call.message.edit_text(
        f"‚úÖ –õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.",
        reply_markup=get_main_menu_keyboard()
        )
