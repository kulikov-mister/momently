from aiogram import F, Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from keyboards.inline_builder import inline_builder
from database.database import Location, Courier
from database.delite_from_db import delete_location_from_db
from loader import dp

router = Router()
dp.include_router(router)

# –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é
@router.callback_query(F.data == 'delete_location')
async def delete_location_request(call: CallbackQuery, state: FSMContext):
    await state.update_data(admin_id=call.from_user.id)

    # –ü–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    locations = Location.select()

    # –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏
    buttons_data = [
        {"text": location.name, "callback_data": f"delete_location_confirm_{location.id}"}
        for location in locations
    ]

    await call.message.edit_text("üí´ –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.",
                                 reply_markup=inline_builder(buttons_data))


# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith('delete_location_confirm_'))
async def delete_location_confirm_request(call: CallbackQuery, state: FSMContext):
    location_id = call.data.split("_")[3]
    if location_id == "1":
        # –û—Ç–º–µ–Ω–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è
        await call.message.edit_text("‚ùóÔ∏è –û—Å–Ω–æ–≤–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å.")
    else:
        location = Location.get(Location.id == location_id)
        await state.update_data(location_to_delete_id=location_id)

        # –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á—å—Ç–µ –∫—É—Ä—å–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
        main_location = Location.get(Location.id == 1)
        Courier.update(location=main_location).where(Courier.location == location).execute()

        buttons_data = [
                {"text": "‚ùå –£–¥–∞–ª–∏—Ç—å", "callback_data": "confirm_delete_yes"},
                {"text": "‚≠ïÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å", "callback_data": "confirm_delete_no"},
                {"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "mainstart_company"}
            ]

        await call.message.edit_text(
            f"ü§® –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é <b>{location.name}</b>? –í—Å–µ –∫—É—Ä—å–µ—Ä—ã –Ω–∞ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–∫–∞—Ü–∏—é.",
            reply_markup=inline_builder(buttons_data, 2))


# –∫–Ω–æ–ø–∫–∞ –¥–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
@router.callback_query(F.data == 'confirm_delete_yes')
async def confirm_delete_location(call: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    location_id = state_data["location_to_delete_id"]
    location = Location.get(Location.id == location_id)

    delete_location_from_db(location_id)
    
    buttons_data = [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "mainstart_company"}]
    await call.message.edit_text(f"‚úÖ –õ–æ–∫–∞—Ü–∏—è <b>{location.name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                                 reply_markup=inline_builder(buttons_data))

# –∫–Ω–æ–ø–∫–∞ –Ω–µ—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
@router.callback_query(F.data == 'confirm_delete_no')
async def cancel_delete_location(call: CallbackQuery, state: FSMContext):
    buttons_data = [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "mainstart_company"}]
    await call.message.edit_text("üëå –û–∫–µ–π, –ª–æ–∫–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.",
                                 reply_markup=inline_builder(buttons_data))
