import time, logging

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from Filter.Filter import IsNotCommand, IsNotCommandInStates, IsStates
from geopy.distance import geodesic

from config_data.config import geolocator, cost_per_km, BING_MAPS_KEY
from database.add_to_db import create_order_in_db
from database.database import Location
from database.get_to_db import get_order_by_user_id
from handlers.default_handlers.start import start
from keyboards.inline.adresses import create_address_keyboard
from keyboards.inline.location_courier import create_location_keyboard
from keyboards.inline.orders_inline.user_order_inline.comment import comment_keyboard
from keyboards.inline.orders_inline.user_order_inline.payment_method import payment_keyboard
from keyboards.reply.orders_reply.send_location import send_location_keyboard
from keyboards.reply.reply_menu_user import get_main_menu_keyboard
from loader import dp, bot
from states.order_states import CourierOrderState
from utils import message_for_courier
from utils.get_adresses import get_sorted_address, search_address
from utils.get_distance import get_distance_and_duration_ms
from utils.order_detail import calculate_order_details
from utils.validate_data import validate_order_data

router = Router()
dp.include_router(router)

# —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
@router.callback_query(F.data == 'order')
async def location_request(call: CallbackQuery, state: FSMContext):
    await state.update_data(user_id=call.from_user.id)
    locations = Location.select()
    locations_data = [(loc.name, loc.latitude, loc.longitude) for loc in locations]
    inline_kb = create_location_keyboard(locations_data, 1, "mainstart", call.data)

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=inline_kb)
    await state.set_state(CourierOrderState.LOCATION)

# –ø–æ–ª—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data.startswith('location:'), CourierOrderState.LOCATION)
async def process_callback_location(call: CallbackQuery, state: FSMContext):
    _, lat, lon = call.data.split(':')
    location = Location.get(Location.latitude == float(lat), Location.longitude == float(lon))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ state –Ω–∞–ø—Ä—è–º—É—é
    await state.update_data(location_id=location.id)

    await call.answer()
    await call.message.delete()
    await call.message.answer(
        "üìçüì¶ <b>–û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å –ø–æ—Å—ã–ª–∫—É?</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n"
        "üîÖ <b>–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º –∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç</b> (–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1)\n\n"
        "üîÖ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:</b>\n\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É 'üìé' (–°–∫—Ä–µ–ø–∫–∞), –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ 'üìç' (–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è) –∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ.\n\n",
        reply_markup=send_location_keyboard()
    )
    await state.set_state(CourierOrderState.FIRST_LOCATION)

# –ø–µ—Ä–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –≤ –≤–∏–¥–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
@router.message(CourierOrderState.FIRST_LOCATION, F.content_type.in_({'location', 'venue'}))
async def handle_first_location(message: Message, state: FSMContext):
    if message.location:
        latitude = message.location.latitude
        longitude = message.location.longitude
    elif message.venue:
        latitude = message.venue.location.latitude
        longitude = message.venue.location.longitude
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    state_data = await state.get_data()
    state_data["first_latitude"] = latitude
    state_data["first_longitude"] = longitude
    await state.set_data(state_data)

    await message.answer("‚õ≥Ô∏è<b> –ö—É–¥–∞ –µ–¥–µ–º?</b>\n\n"
                         "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n"
                         "üîÖ <b>–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º –∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç</b> (–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1)\n\n"
                         "üîÖ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:</b>\n\n"
                         "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É 'üìé' (–°–∫—Ä–µ–ø–∫–∞), –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ 'üìç' (–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è) –∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ.\n\n",
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(CourierOrderState.SECOND_LOCATION)

# –≤—Ç–æ–∞—è –ª–æ–∫–∞—Ü–∏—è –≤ –≤–∏–¥–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
@router.message(CourierOrderState.SECOND_LOCATION, F.content_type.in_(['location', 'venue']))
async def handle_second_location(message: Message, state: FSMContext):
    if message.location:
        latitude = message.location.latitude
        longitude = message.location.longitude
    elif message.venue:
        latitude = message.venue.location.latitude
        longitude = message.venue.location.longitude
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    state_data = await state.get_data()
    state_data["second_latitude"] = latitude
    state_data["second_longitude"] = longitude
    await state.set_data(state_data)
    print(state_data)
    await message.answer("üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=payment_keyboard())
    await state.set_state(CourierOrderState.PAYMENT_METHOD)

    
# –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –≤ –∫–Ω–æ–ø–∫–µ
@router.callback_query(F.data.startswith('location:'), IsStates([CourierOrderState.FIRST_LOCATION, CourierOrderState.SECOND_LOCATION]) )
async def handle_location_callback(call: CallbackQuery, state: FSMContext):
    _, lat, lon = call.data.split(":")
    latitude = float(lat)
    longitude = float(lon)
    current_state = await state.get_state()

    if current_state == CourierOrderState.FIRST_LOCATION:
        await state.update_data(first_latitude=latitude, first_longitude=longitude)
        msg = """‚õ≥Ô∏è –ö—É–¥–∞ –µ–¥–µ–º?\n\n
          –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
          üîÖ <b>–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º –∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç</b> (–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1)
          üîÖ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è:</b>
          –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É 'üìé' (–°–∫—Ä–µ–ø–∫–∞), –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ 'üìç' (–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è) –∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ."""
        inline_kb = ReplyKeyboardRemove()
        
        try:
            await call.message.edit_text(msg, reply_markup=inline_kb)
        except:
            await call.message.delete()
            await call.message.answer(msg, reply_markup=inline_kb)
        await state.set_state(CourierOrderState.SECOND_LOCATION)
    
    elif current_state == CourierOrderState.SECOND_LOCATION:
        await state.update_data(second_latitude=latitude, second_longitude=longitude)
        msg = "üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
        inline_kb = payment_keyboard()
    
        try:
            await call.message.edit_text(msg, reply_markup=inline_kb)
        except:
            await call.message.delete()
            await call.message.answer(msg, reply_markup=inline_kb)
    
        await state.set_state(CourierOrderState.PAYMENT_METHOD)


# –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@router.message( IsNotCommandInStates([CourierOrderState.SECOND_LOCATION, CourierOrderState.FIRST_LOCATION]) )
async def handle_location_text(message: Message, state: FSMContext):
    locations_data = await search_address(message.text, BING_MAPS_KEY)
    print(locations_data)
    if not locations_data:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    
    await state.update_data({'locations_data': locations_data})
    inline_kb = create_address_keyboard(locations_data, 1, "mainstart", "LOCATION")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=inline_kb)

# –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –ø–ª–∞—Ç–µ–∂–∞
@router.callback_query(F.data.in_(["cash", "transfer"]), CourierOrderState.PAYMENT_METHOD)
async def handle_payment(call: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    state_data["payment_method"] = call.data
    await state.set_data(state_data)

    await call.message.delete()
    await call.message.answer("‚úçÔ∏è –ñ–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É? :",
                              reply_markup=comment_keyboard())
    await state.set_state(CourierOrderState.COMMENT)

# –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@router.message(IsNotCommand(), CourierOrderState.COMMENT)
async def handle_comment(message: Message, state: FSMContext):
    if message.text.startswith('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await start(message, state)
        return

    state_data = await state.get_data()
    state_data["comment"] = message.text if message.text != "‚õîÔ∏è –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤" else "-"

    first_location = (state_data["first_latitude"], state_data["first_longitude"])
    second_location = (state_data["second_latitude"], state_data["second_longitude"])
    distance, duration = await get_distance_and_duration_ms(first_location, second_location, BING_MAPS_KEY)
    if distance is None or duration is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return


    cost = distance * cost_per_km

    state_data["distance"] = distance
    state_data["cost"] = cost

    await state.set_data(state_data)
    if not validate_order_data(state_data):
        return await message.answer("–î–∞–Ω–Ω—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç! –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
    
    # —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ
    create_order_in_db(state_data)
    user_id = message.chat.id
    order = get_order_by_user_id(user_id)

    if order:
        first_address, second_address = await calculate_order_details(order)
        if first_address and second_address:
            await message.answer("üëç –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n\n"
                                "–ö–æ–≥–¥–∞ –∫—É—Ä—å–µ—Ä –ø—Ä–∏–º–µ—Ç –∑–∞–∫–∞–∑ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å, –º—ã –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º!\n\n"
                                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ/–æ–±–Ω–æ–≤–∏—Ç–µ <b> üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é </b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ!",
                                reply_markup=get_main_menu_keyboard())
            time.sleep(2)
            await message.answer("üëÄ –ò—â—É –¥–ª—è –≤–∞—Å —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ ")

            # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
            await message_for_courier.notify_couriers(order, first_address, second_address, distance, cost)
        
        else:
            await message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç")
    else:
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu_keyboard())
